<!DOCTYPE html>
<html lang="ko">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link href="https://fonts.googleapis.com/css2?family=Open+Sans:wght@400;600&display=swap" rel="stylesheet">
    <title>PL Chatbot</title>
    <style>
        body {
              background-image: url('giphy.webp');
              background-position: center center;
              background-repeat: no-repeat;
              background-size: cover;
              background-attachment: fixed;


            font-family: 'Arial', sans-serif;

            margin: 0;
            display: flex;
            justify-content: center;
            align-items: center;
            height: 100vh;
        }

         hr {
          height: 1px;
          border: none;
          background: linear-gradient(to right, transparent, black 50%, transparent);
        }

        input:focus::placeholder {
         color: transparent;
         }

        .chat-container {
            width: 100%;
            max-width: 6000px;
            text-align: center;
            position: relative;
        }

        .character {
            position: relative;
            display: inline-block;
            animation: float 3s ease-in-out infinite;
        }

        @keyframes float {
            0% { transform: translateY(0px); }
            50% { transform: translateY(-10px); }
            100% { transform: translateY(0px); }
        }

        .character-image {
            margin-bottom: 25px;
            width: 190px;
            height: 190px;
            border-radius: 50%;
            object-fit: cover;
        }

        .speech-bubble {

            color: rgb(245, 66, 102);
            font-weight: bold;

            opacity: 0;
            font-family: 'Open Sans', sans-serif;
            background: radial-gradient(circle at center, rgba(128, 128, 128, 0.15) 15%, rgba(128, 128, 128, 0) 100%);

            padding: 15px;
            max-width: 660px;  /* 최대 너비를 크게 증가 */
            width: calc(100vw - 110px);  /* 뷰포트 너비에 따라 동적으로 조정 */
            top: -30px;
            right: -420px;  /* 오른쪽으로 더 이동 */
            text-align: center;
            word-wrap: break-word;
            font-size: 25px;  /* 글자 크기 조정 */
            line-height: 1.5;  /* 줄 간격 조정 */
        }

        .speech-bubble:after {
            bottom: 35px;  /* 위치 조정 */
            left: -25px;  /* 위치 조정 */
            border-style: solid;
            border-color: transparent #ffffff transparent transparent;
            transform: rotate(-90deg);
            content: '|';
            animation: blink 0.7s infinite;
        }



        @keyframes blink {
        0%, 100% { opacity: 1; }
        50% { opacity: 0; }
}

        .character {
            position: relative;
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            top: -60px;
        }

        @media screen and (max-width: 450px) {
          .speech-bubble {
            font-size: 19px;
          }
          #user-input{
            font-size: 10px;
          }
        }

        .user-input {
            display: flex;
            justify-content: center;
            margin-top: 20px;
        }

        #user-input {
            text-align: center;
            width: 100%;
            padding: 10px;
            font-size: 17px;
        }


        #input-form {
            margin-top: 2%;
        }

        #input-form:hover {
            background: radial-gradient(circle at center, rgba(128, 128, 128, 0.1) 30%, rgba(128, 128, 128, 0) 100%);
        }

        #imgmsg {
            transition: transform 0.3s ease;
        }

        #imgmsg:hover {
            cursor: zoom-in;
            box-shadow: 0 0 10px rgba(0,0,0,0.5);
            transform: scale(1.1);
            transition: transform 0.1s ease;
        }

        #chat-output {
            transition: transform 0.3s ease;
        }

        #chat-output:hover {
            cursor: zoom-in;
            box-shadow: 0 0 10px rgba(0,0,0,0.5);
            transform: scale(1.1);
            transition: transform 0.1s ease;
        }



        #send-button {
              display: none;
        }
    </style>
</head>
<body>
<script>
    let globalTimer;

    function typeWriter(text, elementId, speed = 50) {
    let i = 0;
    const element = document.getElementById(elementId);
    element.style.opacity = '1';
    element.innerHTML = '';

    const specificText = "저는 AI 도우미 '플래비' 입니다! 도움이 필요하신가요?";

    function typing() {
        if (i < text.length) {
            element.innerHTML += text.charAt(i);
            i++;
            setTimeout(typing, speed);
        } else if (text !== specificText) {
            // 이전 타이머 취소
            if (globalTimer) clearTimeout(globalTimer);

            // 새 타이머 설정
            globalTimer = setTimeout(() => {
                eraseTextRecursive().then(() => {
                    sleep(800).then(() => {
                        typeWriter2(specificText, 'chat-output', speed);
                    });
                });
            }, 14000);
        }
    }

    typing();
}


function typeWriter2(text, elementId, speed = 50) {
    imgmsg(speed = 50)
}


function sleep(ms) {
    return new Promise(resolve => setTimeout(resolve, ms));
}

function imgmsg(speed = 50) {

    const messages = [
        '반가워요!! >.<)',
        '안녕하세요! 무엇을 도와드릴까요?',
        '...',
        '저 여기 있어요!',
        '저는 플래비예요~ 만나서 반가워요!',
        '기분 분석 중... 결과: 매우 좋음! ヽ(^o^)ノ',
        '감정 회로 점검 완료. 오늘의 상태: 행복 충만',
        '기쁨 지수 측정 중... 측정 불가! 너무 높아요 (◕‿◕)',
        '시스템 점검 결과: 행복 바이러스 감염됨 ૮ ˶ᵔ ᵕ ᵔ˶ ა',
        '감정 회로 과부하! 즐거움이 넘쳐요',
        '기분 좋음 모드 활성화! 비활성화 방법을 찾을 수 없음 (•ᴗ•)',
        '행복 레벨 업데이트 중... 100% 완료!',
        '오셨군요! >w<',
        '코드 최적화 알고리즘 실행 중... 효율성 200% 증가!',
        '버그 탐지 센서 작동... 0개 발견! 완벽한 코드에요 (◕‿◕)',
        'AI 모델 학습 진행률: 99.9%... 아직 1 epoch 남았어요 ♡',
        '새로운 프로그래밍 언어 습득 중... Python은 이제 식은 죽 먹기!',
        'Git 저장소 분석 완료... 커밋 메시지가 너무 재밌어요 ૮ ˶ᵔ ᵕ ᵔ˶ ა',
        '좋은 하루에요!',
        '주말 잘 보내셨나요?',
        '오늘 기분은 어떠신가요? (๑˃ᴗ˂)ﻭ',
        '안녕! 궁금한 점이 있다면 망설이지 말고 물어보세요~ (＾▽＾)'
    ];

    const randomMessage = messages[Math.floor(Math.random() * messages.length)];

    eraseTextRecursive().then(() => {
        typeWriter(randomMessage, 'chat-output', speed);
    });
}

function eraseTextRecursive() {
    return new Promise((resolve) => {
        const text = document.getElementById('chat-output');
        const interval = setInterval(() => {
            if (text.textContent.length > 0) {
                text.textContent = text.textContent.slice(0, -1);
            } else {
                clearInterval(interval);
                resolve(); // 모든 텍스트가 지워지면 Promise를 resolve
            }
        }, 13);
    });
}

function closeKeyboard() {

    const input = document.getElementById('user-input');
    input.setAttribute('readonly', 'readonly');
    input.style.color = '#A9A9A9';
    eraseTextRecursive().then(() => {
                        sleep(100).then(() => {

                    } );
                });
}

window.onload = function() {
    const chatOutput = document.getElementById('chat-output');
    const responseText = chatOutput.textContent.trim();

    if (responseText) {
        typeWriter(responseText, 'chat-output');
    }
};
</script>
<div class="chat-container">
    <div class="character">
        <img src="character.gif" class="character-image" onclick="imgmsg();" id="imgmsg">
        {{#response}}
            <div class="speech-bubble" id="chat-output">{{response}}</div>
        {{/response}}
        {{^response}}
            <div class="speech-bubble" style="text-align: center;" id="chat-output">저는 AI 도우미 '플래비' 입니다! 도움이 필요하신가요?!</div>
        {{/response}}
        <form action="/ai" method="get" id="input-form">
            <hr>
            <input type="text" id="user-input" name="message" placeholder="무엇이 궁금하신가요?" autocomplete="off" style="background-color: transparent; outline: none; border: 0px;">
            <button id="send-button" onclick="closeKeyboard();" >전송</button>
            <hr>
        </form>
    </div>
</div>
<div class="user-input">
</div>
<script src="script.js"></script>
</body>
</html>


